import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "1.2.1"
}

group = "${project.group}.${project.mod_id}" as String
archivesBaseName = "${project.mod_id}"

def baseVersion = "${project.mod_version}" as String
def ENV = System.getenv()

if (ENV.BUILD_NUMBER) {
    version = baseVersion + '.' + ENV.BUILD_NUMBER
} else {
    version = baseVersion + '.local'
}

println project.gradle.startParameter


dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    modCompileOnly("curse.maven:malilib-303119:${project.malilib_version}")

    if (!project.gradle.startParameter.projectDir.getName().startsWith("magiclib-compat")) {
        modRuntimeOnly("curse.maven:malilib-303119:${project.malilib_version}")
        modRuntimeOnly("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
        runtimeOnly fileTree(dir: "magiclib-compat-mc1_18/build/devlibs", include: ["magiclib-compat-mc1_18-0.3.local-dev.jar"])
    }


    subprojects.each {
        include project("${it.name}:")
    }
}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"

    loom.runConfigs.configureEach {
        property("mixin.debug.export", "true")
    }

    version = rootProject.version
    group = rootProject.group

    repositories {
        maven {
            url 'https://www.cursemaven.com/'
        }
        maven {
            url = "https://api.modrinth.com/maven"
        }
    }

    dependencies {
        mappings(loom.officialMojangMappings())
        modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
        modRuntimeOnly("curse.maven:lazydfu-433518:${project.lazydfu_version}")
        //modRuntimeOnly("curse.maven:imblockerfabric-399225:${project.imblockerfabric}")
    }

    runClient {
        defaultCharacterEncoding = "UTF-8"
    }

    runServer {
        defaultCharacterEncoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.sourceCompatibility = JavaVersion.VERSION_1_8
        it.targetCompatibility = JavaVersion.VERSION_1_8
    }

    processResources {
        inputs.property "version", rootProject.version

        filesMatching("fabric.mod.json") {
            include "fabric.mod.json"
            expand "mod_version": rootProject.version
        }
    }
}

subprojects {

    if (project.gradle.startParameter.taskNames.size() == 1 && project.gradle.startParameter.taskNames.get(0) == "runClient") {
        dependencies {
            modImplementation(rootProject)
        }
    } else {
        dependencies {
            implementation(rootProject)
        }
    }

}

jar {
    from("LICENSE")
}

task publishModrinth(type: TaskModrinthUpload) {
    onlyIf {
        System.getenv("MODRINTH_API_TOKEN")
    }
    token = System.getenv("MODRINTH_API_TOKEN")
    projectId = "${project.modrinth_project_id}"
    versionNumber = System.getenv("VERSION_NUMBER")
    changelog = System.getenv("CHANGE_LOG")
    uploadFile = remapJar
    switch ("${project.modrinth_release_type}") {
        case "alpha":
            versionType = VersionType.ALPHA
            break
        case "beta":
            versionType = VersionType.BETA
            break
        case "release":
            versionType = VersionType.RELEASE
            break
    }
    addGameVersion("${project.minecraft_version}")
    addLoader('fabric')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId(project.group)
            artifactId(project.archivesBaseName)
            version(project.version)
            from(components.java)
        }

        snapshot(MavenPublication) {
            groupId(project.group)
            artifactId(project.archivesBaseName)
            version(baseVersion + '-SNAPSHOT')
            from(components.java)
        }
    }

    repositories {
        maven {
            url "$projectDir/publish"
        }
    }
}
