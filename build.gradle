plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

def baseVersion = "${project.mod_version}" as String
def ENV = System.getenv()

if (ENV.BUILD_NUMBER) {
    version = baseVersion + '.' + ENV.BUILD_NUMBER
} else {
    version = baseVersion + '.local'
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    modCompileOnly("curse.maven:malilib-303119:${project.malilib_version}")

    if (project.gradle.startParameter.projectDir != null &&
            !project.gradle.startParameter.projectDir.getName().startsWith("magiclib-compat")) {
        modRuntimeOnly("curse.maven:malilib-303119:${project.malilib_version}")
        modRuntimeOnly("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
        modImplementation("curse.maven:modmenu-308702:${project.modmenu_version}")
        runtimeOnly(fileTree(dir: "magiclib-compat-mc1_18/build/devlibs", include: ["*-dev.jar"]))
    }

    subprojects.each {
        include(project("${it.name}:"))
    }
}

var currentProject = project

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"

    // BUG: remapperIsolation not work with LegacyMixinAp
    loom {
        mixin {
            useLegacyMixinAp = false
        }
    }

    remapJar {
        remapperIsolation = true
    }

    group = "${project.group}.${project.mod_id}" as String
    archivesBaseName = "${project.mod_id}"

    loom.runConfigs.configureEach {
        property("mixin.debug.export", "true")
    }

    version = currentProject.version
    group = currentProject.group

    repositories {
        maven {
            url 'https://www.cursemaven.com/'
        }
        maven {
            url 'https://api.modrinth.com/maven'
        }
    }

    dependencies {
        mappings(loom.officialMojangMappings())
        modImplementation("net.fabricmc:fabric-loader:${currentProject.fabric_loader_version}")
        modRuntimeOnly("curse.maven:lazydfu-433518:${currentProject.lazydfu_version}")
        //modRuntimeOnly("curse.maven:imblockerfabric-399225:${project.imblockerfabric}")
    }

    runClient {
        defaultCharacterEncoding = "UTF-8"
    }

    runServer {
        defaultCharacterEncoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.sourceCompatibility = JavaVersion.VERSION_1_8
        it.targetCompatibility = JavaVersion.VERSION_1_8
    }

    processResources {
        inputs.property "version", currentProject.version

        filesMatching("fabric.mod.json") {
            include "fabric.mod.json"
            expand "mod_version": currentProject.version
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects {
    if (project.gradle.startParameter.taskNames.size() == 1 && project.gradle.startParameter.taskNames.get(0) == "runClient") {
        dependencies {
            modImplementation(currentProject)
        }
    } else {
        dependencies {
            implementation(currentProject)
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)

                pom.withXml { rootNode ->
                    rootNode.asNode().remove(rootNode.asNode().dependencies)
                }
            }
        }

        repositories {
            maven {
                url "$rootDir/publish"
            }
        }
    }
}

jar {
    from("LICENSE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            pom.withXml { rootNode ->
                def depsNode = rootNode.asNode().children().get(4)
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "provided")
                }
            }
        }
    }

    repositories {
        maven {
            url "$rootDir/publish"
        }
    }
}

